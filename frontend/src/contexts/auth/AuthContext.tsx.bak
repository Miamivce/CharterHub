import React, { createContext, useContext, useState, useEffect, useReducer, useCallback } from 'react';
import wpApi, { ApiError, ValidationError, RateLimitError } from '@/services/wpApi';
import { showDatabaseTimeoutNotification, showErrorNotification } from '../notification/NotificationContext';
import { customerService } from '@/services/customerService';
import { FEATURES } from '@/config';

// Define constants for development mode
const DEVELOPMENT_MODE = process.env.NODE_ENV === 'development' || import.meta.env.DEV;
const DEV_USERS_KEY = 'dev_users';

// Constants for token management
const TOKEN_KEY = 'auth_token';
const REFRESH_TOKEN_KEY = 'refresh_token';
const TOKEN_EXPIRY_KEY = 'token_expiry';
const REMEMBER_ME_KEY = 'remember_me';
const USER_DATA_KEY = 'user_data';

// Define Notification type locally
interface Notification {
  id: string;
  type: 'success' | 'error' | 'info' | 'warning';
  message: string;
  duration?: number;
  title?: string;
  actions?: { label: string; onClick: () => void }[];
}

// Add gtag type declaration for TypeScript
declare global {
  interface Window {
    gtag?: (command: string, action: string, params: any) => void;
  }
}

// Add notification reducer
type NotificationAction = 
  | { type: 'ADD_NOTIFICATION'; payload: Notification }
  | { type: 'REMOVE_NOTIFICATION'; payload: string };

const notificationReducer = (state: Notification[], action: NotificationAction): Notification[] => {
  switch (action.type) {
    case 'ADD_NOTIFICATION':
      return [...state, action.payload];
    case 'REMOVE_NOTIFICATION':
      return state.filter(notification => notification.id !== action.payload);
    default:
      return state;
  }
};

interface User {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  role: 'admin' | 'customer';
  verified: boolean;
  phoneNumber?: string;
  company?: string;
}

interface ApiStatus {
  connected: boolean;
  message: string;
}

// Add types for rate limiting
interface RateLimitInfo {
  isLocked: boolean;
  remainingAttempts: number;
  lockoutMinutes: number;
  lockedUntil: Date | null;
}

interface AuthContextType {
  // User state
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  apiStatus: ApiStatus;
  rateLimitInfo: RateLimitInfo | null;
  
  // Auth functions
  login: (email: string, password: string, rememberMe?: boolean) => Promise<void>;
  logout: () => Promise<void>;
  register: (userData: UserRegisterData) => Promise<void>;
  refreshTokenIfNeeded: () => Promise<boolean>;
  updateProfile: (userData: Partial<User>) => Promise<void>;
  forgotPassword: (email: string) => Promise<void>;
  resetPassword: (data: PasswordResetData) => Promise<void>;
  verifyEmail: (token: string) => Promise<void>;
  fetchAuthStatus: () => Promise<ApiStatus>;
  testConnection: () => Promise<void>;
}

// User register data interface
interface UserRegisterData {
    email: string;
    password: string;
    firstName: string;
    lastName: string;
    phoneNumber?: string;
    company?: string;
  role: string;
  rememberMe: boolean;
}

// Password reset data interface
interface PasswordResetData {
  token: string;
  newPassword: string;
  email?: string;
}

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [apiStatus, setApiStatus] = useState<ApiStatus>({ connected: false, message: 'Checking connection...' });
  const [notifications, dispatch] = useReducer(notificationReducer, []);
  const [rateLimitInfo, setRateLimitInfo] = useState<RateLimitInfo | null>(null);
  
  // Helper to get the appropriate storage based on remember me setting
  const getStorage = () => {
    return localStorage.getItem(REMEMBER_ME_KEY) === 'true' ? 
      localStorage : sessionStorage;
  };
  
  // Helper to safely parse user data
  const parseUserData = (userData: any): User => {
    return {
      id: typeof userData.id === 'string' ? parseInt(userData.id, 10) : 
          typeof userData.ID === 'string' ? parseInt(userData.ID, 10) : 
          userData.id || userData.ID || 0,
      email: userData.email || userData.user_email || '',
      firstName: userData.firstName || userData.first_name || '',
      lastName: userData.lastName || userData.last_name || '',
      role: (userData.role === 'administrator' || userData.role === 'admin') ? 'admin' : 'customer',
      verified: Boolean(userData.verified),
      phoneNumber: userData.phoneNumber || userData.phone_number || '',
      company: userData.company || ''
    };
  };
  
  // Simplified function to refresh the token if necessary
  const refreshTokenIfNeeded = async () => {
    try {
      const storage = getStorage();
      const token = storage.getItem(TOKEN_KEY);
      const refreshToken = storage.getItem(REFRESH_TOKEN_KEY);
      const tokenExpiry = storage.getItem(TOKEN_EXPIRY_KEY);
      
      if (!token || !refreshToken) {
        console.log('No token or refresh token available');
        return false;
      }
      
      // Check if token will expire in the next 5 minutes or has expired
      const expiryTime = Number(tokenExpiry);
      const fiveMinutesFromNow = Date.now() + (5 * 60 * 1000);
      
      // Only refresh if token is about to expire or has expired
      if (isNaN(expiryTime) || expiryTime < fiveMinutesFromNow) {
        console.log('Token expiring soon or expiry unknown, refreshing...');
        try {
          const response = await wpApi.refreshToken();
          
          // Set new expiry based on remember me setting
          const rememberMe = storage.getItem(REMEMBER_ME_KEY) === 'true';
          const expiryDuration = rememberMe ? (30 * 24 * 60 * 60 * 1000) : (24 * 60 * 60 * 1000);
          const newExpiry = Date.now() + expiryDuration;
          
          // Store token data in the appropriate storage
          storage.setItem(TOKEN_KEY, response.token);
          storage.setItem(REFRESH_TOKEN_KEY, response.refreshToken);
          storage.setItem(TOKEN_EXPIRY_KEY, newExpiry.toString());
          
          return true;
        } catch (refreshError) {
          console.error('Token refresh operation failed:', refreshError);
          if (refreshError instanceof Error && (
            refreshError.message.includes('401') || 
            refreshError.message.includes('403') || 
            refreshError.message.includes('Unauthorized')
          )) {
            // Clear user state for auth failures
            setUser(null);
            
            // Clear tokens from both storages to be safe
            localStorage.removeItem(TOKEN_KEY);
            localStorage.removeItem(REFRESH_TOKEN_KEY);
            localStorage.removeItem(TOKEN_EXPIRY_KEY);
            localStorage.removeItem(USER_DATA_KEY);
            
            sessionStorage.removeItem(TOKEN_KEY);
            sessionStorage.removeItem(REFRESH_TOKEN_KEY);
            sessionStorage.removeItem(TOKEN_EXPIRY_KEY);
            sessionStorage.removeItem(USER_DATA_KEY);
          }
          return false;
        }
      }
      
      return true;
    } catch (err) {
      console.error('Token refresh check failed:', err);
      // Don't clear user on network errors - only auth failures
      return false;
    }
  };

  const testConnection = async (): Promise<void> => {
    setApiStatus({ connected: false, message: 'Testing connection...' });
    try {
      const result = await wpApi.testConnection();
      setApiStatus({ 
        connected: true, 
        message: result.message || 'Connected to PHP Authentication API' 
      });
    } catch (error) {
      console.error('API connection test failed:', error);
      setApiStatus({ 
        connected: false, 
        message: error instanceof Error ? error.message : 'Failed to connect to API' 
      });
    }
  };

  useEffect(() => {
  const initAuth = async () => {
    setIsLoading(true);
      
      try {
        // First check if we have stored user data in either storage
        const localUser = localStorage.getItem(USER_DATA_KEY);
        const sessionUser = sessionStorage.getItem(USER_DATA_KEY);
        const rememberMe = localStorage.getItem(REMEMBER_ME_KEY) === 'true';
        
        // Use the appropriate storage based on remember me setting
        const storedUser = rememberMe ? localUser : sessionUser;
        
        if (storedUser) {
          // If we have stored user data, use it first (for immediate UI rendering)
          try {
            const parsedUser = JSON.parse(storedUser);
            setUser(parseUserData(parsedUser));
          } catch (parseError) {
            console.error('Error parsing stored user data:', parseError);
          }
        }
        
        // Try to get fresh user data from API
        try {
      const userData = await wpApi.getCurrentUser();
      if (userData) {
            // Save the fresh user data
            const userForState = parseUserData(userData);
            setUser(userForState);
            
            // Save to appropriate storage
            const storage = getStorage();
            storage.setItem(USER_DATA_KEY, JSON.stringify(userForState));
      } else {
        // If no user data but we have a token, try to refresh it
            const storage = getStorage();
            const hasToken = storage.getItem(TOKEN_KEY);
        
            if (hasToken) {
          const refreshed = await refreshTokenIfNeeded();
          if (refreshed) {
                console.log('Refreshed token successfully');
                // If token refresh is successful, try to get user data again
                const newUserData = await wpApi.getCurrentUser();
                if (newUserData) {
                  const userForState = parseUserData(newUserData);
                  setUser(userForState);
                  storage.setItem(USER_DATA_KEY, JSON.stringify(userForState));
                }
              }
            }
          }
        } catch (apiError: any) {
          console.error('Error fetching user data:', apiError);
          
          // If we have a network error, keep using the stored user data
          // Only clear user for auth failures
          if (apiError?.response?.status === 401 || 
              apiError?.message?.includes('401') || 
              apiError?.message?.includes('Unauthorized')) {
            console.log('Session expired or invalid, clearing credentials');
            // Clear invalid auth tokens from both storages
            localStorage.removeItem(TOKEN_KEY);
            localStorage.removeItem(REFRESH_TOKEN_KEY);
            localStorage.removeItem(TOKEN_EXPIRY_KEY);
            localStorage.removeItem(USER_DATA_KEY);
            
            sessionStorage.removeItem(TOKEN_KEY);
            sessionStorage.removeItem(REFRESH_TOKEN_KEY);
            sessionStorage.removeItem(TOKEN_EXPIRY_KEY);
            sessionStorage.removeItem(USER_DATA_KEY);
            
            // Clear user state
            setUser(null);
          }
        }
      } catch (err: any) {
        console.error('Error initializing auth:', err);
        // Handle 401 Unauthorized errors gracefully
        if (err?.response?.status === 401 || 
            err?.message?.includes('401') || 
            err?.message?.includes('Unauthorized')) {
          console.log('Unauthorized access, clearing credentials');
          // Clear invalid auth tokens from both storages
          localStorage.removeItem(TOKEN_KEY);
          localStorage.removeItem(REFRESH_TOKEN_KEY);
          localStorage.removeItem(TOKEN_EXPIRY_KEY);
          localStorage.removeItem(USER_DATA_KEY);
          
          sessionStorage.removeItem(TOKEN_KEY);
          sessionStorage.removeItem(REFRESH_TOKEN_KEY);
          sessionStorage.removeItem(TOKEN_EXPIRY_KEY);
          sessionStorage.removeItem(USER_DATA_KEY);
        } else {
          setApiStatus({
            connected: false,
            message: err instanceof Error ? err.message : 'Unknown error'
          });
        }
    } finally {
      setIsLoading(false);
    }
  };

    initAuth();
    
    // Setup more frequent token refresh checks (every minute) to prevent expiration
    const tokenRefreshId = setInterval(async () => {
      // Only refresh if we have a user logged in
      if (user) {
        try {
          await refreshTokenIfNeeded();
        } catch (error) {
          console.error('Token refresh check failed:', error);
        }
      }
    }, 60 * 1000); // Check every minute
    
    // Keep the existing connection test
    const connectionTestId = setInterval(testConnection, 5 * 60 * 1000);
    
    return () => {
      clearInterval(tokenRefreshId);
      clearInterval(connectionTestId);
    };
  }, []);

  const login = async (email: string, password: string, rememberMe: boolean = false): Promise<void> => {
    setIsLoading(true);
    setError(null);
    // Reset rate limit info on new login attempt
    setRateLimitInfo(null);
    
    try {
      console.log(`AuthContext: Attempting login for ${email}`);
      
      // Store remember me preference
      localStorage.setItem(REMEMBER_ME_KEY, rememberMe.toString());
      
      // Use the right storage based on remember me
      const storage = rememberMe ? localStorage : sessionStorage;
      
      // Before calling wpApi, check if mock auth should be used and if it's development mode
      const shouldUseMockAuth = FEATURES?.MOCK_AUTH && (import.meta.env.DEV || process.env.NODE_ENV === 'development');
      
      if (shouldUseMockAuth) {
        console.log('Using mock authentication in development mode');
        try {
          // First try the auth service with mock data
          const { authService } = await import('@/services/auth');
          const response = await authService.login({ email, password });
          
          if (!response || !response.user) {
            throw new Error('Invalid response from mock auth service');
          }
          
          // Set user in state - convert the response user to match our User interface
          const mockUser: User = {
            id: typeof response.user.id === 'string' ? parseInt(response.user.id, 10) : response.user.id,
            email: response.user.email,
            firstName: response.user.firstName,
            lastName: response.user.lastName,
            role: response.user.role === 'admin' ? 'admin' : 'customer',
            verified: true,
            phoneNumber: (response.user as any).phone || (response.user as any).phoneNumber,
            company: (response.user as any).company
          };
          setUser(mockUser);
          
          // Store user data
          storage.setItem(USER_DATA_KEY, JSON.stringify(mockUser));
          
          // Store tokens (mock token)
          storage.setItem(TOKEN_KEY, response.token);
          storage.setItem(REFRESH_TOKEN_KEY, 'mock-refresh-token');
          
          // Set token expiry
          const expiryDuration = rememberMe ? (30 * 24 * 60 * 60 * 1000) : (24 * 60 * 60 * 1000);
          const expiry = Date.now() + expiryDuration;
          storage.setItem(TOKEN_EXPIRY_KEY, expiry.toString());
          
          return;
        } catch (mockError) {
          console.error('Mock authentication failed, attempting real login:', mockError);
        }
      }
      
      // Call wpApi login function (real API attempt)
      try {
        const response = await wpApi.login({ email, password, rememberMe });
        
        if (!response || !response.user) {
          console.error('Invalid login response:', response);
          throw new Error('Invalid response from server');
        }
        
        console.log('AuthContext: Login successful');
        
        // Set user in state - wpApi formatUserData already handled the transformation
        const user: User = {
          id: typeof response.user.id === 'string' ? parseInt(response.user.id, 10) : response.user.id,
          email: response.user.email,
          firstName: response.user.firstName,
          lastName: response.user.lastName,
          role: response.user.role === 'admin' ? 'admin' : 'customer',
          verified: response.user.verified,
          phoneNumber: response.user.phoneNumber,
          company: response.user.company
        };
        setUser(user);
        
        // Store user data
        storage.setItem(USER_DATA_KEY, JSON.stringify(user));
        
        // Store tokens in the appropriate storage
        storage.setItem(TOKEN_KEY, response.token);
        storage.setItem(REFRESH_TOKEN_KEY, response.refresh_token);
        
        // Set token expiry
        const expiryDuration = rememberMe ? (30 * 24 * 60 * 60 * 1000) : (24 * 60 * 60 * 1000);
        const expiry = Date.now() + expiryDuration;
        storage.setItem(TOKEN_EXPIRY_KEY, expiry.toString());
      } catch (apiError) {
        // If MOCK_AUTH is enabled and real login failed, try mock auth as last resort
        if (shouldUseMockAuth) {
          console.log('Real API login failed, falling back to mock auth as last resort');
          try {
            const { authService } = await import('@/services/auth');
            const response = await authService.login({ email, password });
            
            if (!response || !response.user) {
              throw new Error('Invalid response from mock auth service');
            }
            
            // Set user in state - convert the response user to match our User interface
            const mockUser: User = {
              id: typeof response.user.id === 'string' ? parseInt(response.user.id, 10) : response.user.id,
              email: response.user.email,
              firstName: response.user.firstName,
              lastName: response.user.lastName,
              role: response.user.role === 'admin' ? 'admin' : 'customer',
              verified: true,
              phoneNumber: (response.user as any).phone || (response.user as any).phoneNumber,
              company: (response.user as any).company
            };
            setUser(mockUser);
            
            // Store user data
            storage.setItem(USER_DATA_KEY, JSON.stringify(mockUser));
            
            // Store tokens (mock token)
            storage.setItem(TOKEN_KEY, response.token);
            storage.setItem(REFRESH_TOKEN_KEY, 'mock-refresh-token');
            
            // Set token expiry
            const expiryDuration = rememberMe ? (30 * 24 * 60 * 60 * 1000) : (24 * 60 * 60 * 1000);
            const expiry = Date.now() + expiryDuration;
            storage.setItem(TOKEN_EXPIRY_KEY, expiry.toString());
            
            return;
          } catch (mockFallbackError) {
            // If both real and mock auth fail, rethrow the original API error
            throw apiError;
          }
        } else {
          // If mock auth is not enabled, just throw the original API error
          throw apiError;
        }
      }
    } catch (err: any) {
      console.error('AuthContext: Login error:', err);
      
      let errorMessage = 'Login failed';
      
      if (err instanceof ApiError) {
        errorMessage = err.message;
      } else if (err.response?.data?.message) {
        errorMessage = err.response.data.message;
      } else if (err.response?.status === 400) {
        errorMessage = 'Invalid email or password';
      } else if (err instanceof Error) {
        errorMessage = err.message;
      }
      
      // Handle rate limiting errors
      if (err instanceof RateLimitError) {
        const lockoutMinutes = err.retryAfter ? Math.ceil(err.retryAfter / 60) : 30;
        const lockedUntil = new Date();
        lockedUntil.setMinutes(lockedUntil.getMinutes() + lockoutMinutes);
        
        setRateLimitInfo({
          isLocked: true,
          remainingAttempts: 0,
          lockoutMinutes,
          lockedUntil
        });
        
        errorMessage = `Too many login attempts. Please try again after ${lockoutMinutes} minutes or contact support.`;
      }
      
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async () => {
    try {
      await wpApi.logout();
      
      // Clear from both storages to be safe
      localStorage.removeItem(TOKEN_KEY);
      localStorage.removeItem(REFRESH_TOKEN_KEY);
      localStorage.removeItem(TOKEN_EXPIRY_KEY);
      localStorage.removeItem(USER_DATA_KEY);
      
      sessionStorage.removeItem(TOKEN_KEY);
      sessionStorage.removeItem(REFRESH_TOKEN_KEY);
      sessionStorage.removeItem(TOKEN_EXPIRY_KEY);
      sessionStorage.removeItem(USER_DATA_KEY);
      
      setUser(null);
    } catch (err) {
      console.error('Logout error:', err);
      
      // Still clear tokens even if API call fails
      localStorage.removeItem(TOKEN_KEY);
      localStorage.removeItem(REFRESH_TOKEN_KEY);
      localStorage.removeItem(TOKEN_EXPIRY_KEY);
      localStorage.removeItem(USER_DATA_KEY);
      
      sessionStorage.removeItem(TOKEN_KEY);
      sessionStorage.removeItem(REFRESH_TOKEN_KEY);
      sessionStorage.removeItem(TOKEN_EXPIRY_KEY);
      sessionStorage.removeItem(USER_DATA_KEY);
      
      setUser(null);
    }
  };

  const register = useCallback(async (userData: UserRegisterData): Promise<void> => {
    if (isLoading) return;
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Development mode fallback if API is not configured
      if (!import.meta.env.VITE_API_URL && DEVELOPMENT_MODE) {
        // Set a 1 second delay to simulate backend call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const users = JSON.parse(localStorage.getItem(DEV_USERS_KEY) || '[]');
        
        // Check if email already exists
        if (users.some((u: any) => u.email === userData.email)) {
          throw new Error('Email already exists');
        }
        
        // Create a new user
        const newUser = {
          id: parseInt((users.length + 1).toString()), // Convert to number
          email: userData.email,
          firstName: userData.firstName,
          lastName: userData.lastName,
          role: userData.role as 'admin' | 'customer', // Ensure role matches union type
          verified: false,
          // Use phone and company if present
          phoneNumber: userData.phoneNumber || undefined,
          company: userData.company || undefined,
        };
        
        // For development add to local users
        users.push({...newUser, password: userData.password});
        localStorage.setItem(DEV_USERS_KEY, JSON.stringify(users));
        
        // Auto-login after registration
        const storage = userData.rememberMe ? localStorage : sessionStorage;
        
        // Create a token that expires in 2 hours (or 30 days if remember me)
        const now = new Date();
        const expiryDuration = userData.rememberMe ? 30 * 24 * 60 * 60 * 1000 : 2 * 60 * 60 * 1000;
        const expiryTime = now.getTime() + expiryDuration;
        
        const authToken = `dev-token-${newUser.email}-${now.getTime()}`;
        const refreshToken = `dev-refresh-${newUser.email}-${now.getTime()}`;
        
        storage.setItem(TOKEN_KEY, authToken);
        storage.setItem(REFRESH_TOKEN_KEY, refreshToken);
        storage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());
        storage.setItem(USER_DATA_KEY, JSON.stringify(newUser));
        storage.setItem(REMEMBER_ME_KEY, (userData.rememberMe || false).toString());
        
        // Set the user in state
        setUser(newUser);
        
        if (userData.role === 'customer') {
          // In development mode, we'll pretend to sync to customer service
          console.log('Development mode: User would be synced to customer service');
        }
        
        return;
      }

      // Regular API flow
      const response = await wpApi.registerUser({
        email: userData.email,
        password: userData.password,
        firstName: userData.firstName,
        lastName: userData.lastName,
        phoneNumber: userData.phoneNumber,
        company: userData.company
      });
      
      // Add safety check to ensure response has the expected data
      if (!response || !response.token || !response.refresh_token || !response.user) {
        throw new Error('Invalid response from registration API');
      }
      
      // Store auth token and user data
      const storage = userData.rememberMe ? localStorage : sessionStorage;
      storage.setItem(TOKEN_KEY, response.token);
      storage.setItem(REFRESH_TOKEN_KEY, response.refresh_token);
      storage.setItem(REMEMBER_ME_KEY, (userData.rememberMe || false).toString());
      
      // Set token expiry
      const now = new Date();
      const expiryDuration = userData.rememberMe ? 30 * 24 * 60 * 60 * 1000 : 2 * 60 * 60 * 1000;
      const expiryTime = now.getTime() + expiryDuration;
      storage.setItem(TOKEN_EXPIRY_KEY, expiryTime.toString());
      
      // Transform and store user data - add safety checks for each property
      const formattedUser = {
        id: response.user.ID !== undefined ? 
            (typeof response.user.ID === 'string' ? parseInt(response.user.ID, 10) : response.user.ID) : 
            response.user.id !== undefined ?
                (typeof response.user.id === 'string' ? parseInt(response.user.id, 10) : response.user.id) : 0,
        email: response.user.user_email || response.user.email || '',
        firstName: response.user.first_name || response.user.firstName || '',
        lastName: response.user.last_name || response.user.lastName || '',
        role: ((response.user.role === 'admin' || response.user.role === 'administrator') ? 'admin' : 'customer') as 'admin' | 'customer',
        verified: !!response.user.verified,
        phoneNumber: response.user.phone_number || response.user.phoneNumber,
        company: response.user.company
      };
      
      storage.setItem(USER_DATA_KEY, JSON.stringify(formattedUser));
      setUser(formattedUser);
      
      // Sync to customer service if necessary
      if (formattedUser.role === 'customer') {
        try {
          await customerService.addRegisteredCustomer({
            id: formattedUser.id,
            email: formattedUser.email,
            firstName: formattedUser.firstName,
            lastName: formattedUser.lastName,
            role: 'customer' as const,
            phone: formattedUser.phoneNumber || '',
            company: formattedUser.company || ''
          });
        } catch (syncError) {
          console.error('Failed to sync user to customer service:', syncError);
          // We don't want to fail the registration if this fails
        }
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Registration failed';
      setError(message);
      throw new Error(message);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading]);

  const forgotPassword = async (email: string) => {
    setIsLoading(true);
    setError(null);
    try {
      await wpApi.requestPasswordReset({ email });
    } catch (err) {
      const errorMessage = err instanceof ApiError 
        ? err.message 
        : err instanceof Error 
          ? err.message 
          : 'Failed to send reset email';
      
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  const resetPassword = async (data: PasswordResetData): Promise<void> => {
    setIsLoading(true);
    setError(null);
    
    try {
      await wpApi.resetPassword({
        email: data.email || '',
        token: data.token,
        newPassword: data.newPassword
      });
      // Add a notification about successful password reset
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Password reset failed';
      setError(message);
      throw new Error(message);
    } finally {
      setIsLoading(false);
    }
  };

  const updateProfile = async (data: Partial<User>) => {
    setIsLoading(true);
    setError(null);
    try {
      if (!user) {
        throw new Error('You must be logged in to update your profile');
      }
      
      const updatedUser = await wpApi.updateProfile(user.id, data);
      setUser({
        ...updatedUser,
        role: updatedUser.role === 'admin' ? 'admin' : 'customer'
      });
    } catch (err) {
      const errorMessage = err instanceof ApiError 
        ? err.message 
        : err instanceof Error 
          ? err.message 
          : 'Failed to update profile';
      
      setError(errorMessage);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Add implementation for the missing methods
  const fetchAuthStatus = async (): Promise<ApiStatus> => {
    return apiStatus;
  };

  const verifyEmail = async (token: string): Promise<void> => {
    setIsLoading(true);
    setError(null);
    
    try {
      await wpApi.verifyEmail(token);
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Email verification failed';
      setError(message);
      throw new Error(message);
    } finally {
      setIsLoading(false);
    }
  };

  const value: AuthContextType = {
    user,
    isAuthenticated: !!user,
    isLoading,
    error,
    apiStatus,
    rateLimitInfo,
    login,
    logout,
    register,
    refreshTokenIfNeeded,
    updateProfile,
    forgotPassword,
    resetPassword,
    verifyEmail,
    fetchAuthStatus,
    testConnection
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === null) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
} 